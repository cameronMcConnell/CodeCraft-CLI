import argparse
from openai import OpenAI, AssistantEventHandler
from typing_extensions import override
import pandas as pd
import numpy as np
import os

class EventHandler(AssistantEventHandler):
    @override
    def on_text_created(self, text) -> None:
        pass

    def execute_python_code(code):
        pass

def get_args():
    parser = argparse.ArgumentParser(description="CodeCraft-CLI is a \
                             command-line tool designed to modify CSV files using OpenAI's \
                             GPT model. The tool generates Python code based on your input, executes the \
                             code to process the CSV file, and saves the updated CSV file. It allows users \
                             to leverage the power of GPT to automate and streamline CSV file manipulation tasks")

    parser.add_argument("input_file", type=str, help="Path to csv to be processed")
    parser.add_argument("output_file", type=str, help="Path for output file to be created")
    parser.add_argument("prompt", type=str, help="Prompt for function/code to be generated by GPT and executed on the csv file")
    parser.add_argument("-v", "--verbose", help="Increase output verbosity", action="store_true")

    return parser.parse_args()

def generate_python_code(args):
    client = OpenAI(
        api_key=os.environ.get("CODECRAFT_CLI_OPENAI_API_KEY"),
        project=os.environ.get("CODECRAFT_CLI_PROJECT_ID"),
        organization=os.environ.get("CODECRAFT_CLI_ORGANIZATION_ID")
    )   

    csv_file = client.files.create(
        file=open(args.input_file, "rb"),
        purpose="assistants"
    )

    thread = client.beta.threads.create()

    message = client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=args.prompt,
        attachments=[csv_file.id]
    )

    with client.beta.threads.runs.stream(
        thread_id=thread.id,
        assistant_id=os.environ.get("CODECRAFT_CLI_ASSISTANT_ID"),
        instructions="Please address the user as Jane Doe. The user has a premium account.",
        event_handler=EventHandler(),
    ) as stream:
        stream.until_done()

args = get_args()

generate_python_code(args)