from openai import OpenAI
import os, sys, argparse
from util import yaml_reader

config = yaml_reader.YamlReader("../config.yaml").get_yaml_object()

def get_args():
    parser = argparse.ArgumentParser(description="CodeCraft-CLI is a \
                             command-line tool designed to modify CSV files using OpenAI's \
                             GPT model. The tool generates Python code based on your input, executes the \
                             code to process the CSV file, and saves the updated CSV file. It allows users \
                             to leverage the power of GPT to automate and streamline CSV file manipulation tasks")
    parser.add_argument("input_file", type=str, help="Path to csv to be processed")
    parser.add_argument("output_file", type=str, help="Path for output file to be created")
    parser.add_argument("prompt", type=str, help="Prompt for function/code to be generated by GPT and executed on the csv file")
    parser.add_argument("-v", "--verbose", help="Increase output verbosity", action="store_true")
    return parser.parse_args()

def generate_python_code(args):
    client = OpenAI(
        api_key=config["CODECRAFT_CLI_OPENAI_API_KEY"],
        project=config["CODECRAFT_CLI_PROJECT_ID"],
        organization=config["CODECRAFT_CLI_ORGANIZATION_ID"],
    )   

    thread = client.beta.threads.create()

    prompt = f"{args.prompt}\n\nHere is the input file path: {args.input_file}\n\nHere is the output file path: {args.output_file}"

    client.beta.threads.messages.create(
        thread_id=thread.id,
        role="user",
        content=prompt,
    )

    run = client.beta.threads.runs.create_and_poll(
        thread_id=thread.id,
        assistant_id=config["CODECRAFT_CLI_ASSISTANT_ID"],
    )

    if run.status == "completed":
        messages = client.beta.threads.messages.list(
            thread_id=thread.id
        )

        code = messages.data[0].content[0].text.value
        return code[10:-4]
    else: 
        print(run.status, run.last_error)
        sys.exit(1)

def execute_python_code(code):
    exec(code)

def main():
    args = get_args()

    code = generate_python_code(args)
    
    if args.verbose:
        print(f"Generated Code:\n\n{code}")
    
    execute_python_code(code)

if __name__ == "__main__":
    main()